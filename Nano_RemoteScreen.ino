// Adafruit SSD1306 - Version: 2.4.3
#include <Adafruit_SSD1306.h>
#include <splash.h>

/**************************************************************************
 This is an example for our Monochrome OLEDs based on SSD1306 drivers

 Pick one up today in the adafruit shop!
 ------> http://www.adafruit.com/category/63_98

 This example is for a 128x64 pixel display using I2C to communicate
 3 pins are required to interface (two I2C and one reset).

 Adafruit invests time and resources providing this open
 source code, please support Adafruit and open-source
 hardware by purchasing products from Adafruit!

 Written by Limor Fried/Ladyada for Adafruit Industries,
 with contributions from the open source community.
 BSD license, check license.txt for more information
 All text above, and the splash screen below must be
 included in any redistribution.
 **************************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
//#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LOGO_HEIGHT   128
#define LOGO_WIDTH    128
static const unsigned char PROGMEM logo_bmp[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x99, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb9, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0xbc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x6f, 0xf8, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7c, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x47, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x67, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x27, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x33, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x93, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x91, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x91, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xfe, 0xfe, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xfc, 0xfe, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x70, 0xfe, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x70, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x61, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x61, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x63, 0xfc, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x53, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x77, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x77, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1b, 0xc1, 0x6f, 0xf8, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xfc, 0x0f, 0xff, 0x80, 0x00, 0xc0, 0x7f, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x00, 0x61, 0x7f, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xf8, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x21, 0x7f, 0xf0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xec, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xe0, 0x00, 0x00, 0x3c, 0x00, 0x20, 0x01, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xe0, 0x00, 0x40, 0x3c, 0x00, 0x20, 0x43, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x03, 0xe0, 0x00, 0x80, 0x3e, 0x00, 0xf0, 0xc7, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x03, 0xf8, 0x1b, 0x80, 0x3e, 0x03, 0xf3, 0xb7, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x03, 0xfc, 0x1f, 0xc0, 0x7e, 0x00, 0xff, 0xbf, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0x00, 0x00, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xc0, 0xff, 0xbf, 0xff, 0xf7, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe5, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0xcf, 0xff, 0xf7, 0xff, 0xfc, 0xff, 0xdf, 0xff, 0x80, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xec, 0xcf, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0x8f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xee, 0x83, 0xfe, 0xf8, 0x03, 0x8f, 0x1f, 0x0f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x80, 0x71, 0xf8, 0x00, 0x0f, 0x8e, 0x1f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x80, 0x03, 0xfc, 0x00, 0x0f, 0xc0, 0x1f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x03, 0xfe, 0x00, 0x0f, 0x00, 0x1f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x7f, 0x80, 0x1e, 0x00, 0x1f, 0xff, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x1f, 0xfe, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x40, 0x20, 0x0f, 0xf8, 0x00, 0x08, 0x3f, 0xfe, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x40, 0x20, 0x00, 0x00, 0x00, 0x18, 0x3f, 0xfe, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x40, 0xb2, 0x00, 0x00, 0x00, 0x30, 0x3f, 0xfc, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x40, 0x1f, 0x0f, 0xff, 0x03, 0x74, 0x3f, 0xfc, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1d, 0xff, 0xff, 0x3f, 0x64, 0x3f, 0xfc, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0xc4, 0x7f, 0xf8, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x06, 0xf4, 0x00, 0x03, 0x88, 0x7f, 0xf8, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x07, 0x70, 0x00, 0x07, 0x80, 0x7f, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xf8, 0x01, 0xff, 0x00, 0x7f, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0x0f, 0xff, 0x80, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x10, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x10, 0x01, 0xff, 0xff, 0xff, 0x00, 0xff, 0xf0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x18, 0x00, 0xff, 0xff, 0xff, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x3c, 0x00, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x3c, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x3e, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0xff, 0xe0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x3e, 0x00, 0x0f, 0xff, 0xf0, 0x10, 0xff, 0xc0, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x7f, 0x80, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x80, 0x00, 0x00, 0x01, 0xd8, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xc0, 0x00, 0x00, 0x07, 0xdc, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0xdc, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xcc, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xfc, 0x00, 0x00, 0x7f, 0xdc, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 0x00, 0x01, 0xff, 0x9c, 0x7f, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0x80, 0x03, 0xff, 0x9c, 0x3e, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xe0, 0x0f, 0xff, 0x9c, 0x0c, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0x1c, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf9, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf3, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe7, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xcf, 0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x3f, 0x00, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x3f, 0x80, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x3f, 0x80, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x3f, 0x80, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x1f, 0xe0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x1f, 0xe0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x07, 0xf0, 0x00, 0x00, 0xff, 0xff
};

#define Pos1 13 //Define Repeatable Line Positions
#define Pos2 21
#define Pos3 29
#define Pos4 37
#define Pos5 45
#define Pos6 53

uint8_t SelectionPos = Pos1;

#define MainMenu 0
#define ThrottleSweep 1
#define ConstantThrottle 2
#define StressTest 3
#define SensorOutput 4
#define Calibration 5
#define Settings 6

uint8_t CurrentMenu = MainMenu;


void setup() {
  Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

//Draw Tim Smith Splash Screen
  TheManTheMythTheLegend();
  
//Set Global Text Characteristics
  display.clearDisplay();
  display.setTextColor (WHITE);
  display.setTextSize (1);

//Initialize The Main Menu  
  MainMenuSplash();
  display.display();
}

void loop() {
  cursorDown();
  cursorSelect();
  cursorDown();
  cursorDown();
  cursorDown();
  cursorDown();
  cursorDown();
  cursorDown();
}

void TheManTheMythTheLegend(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

void MainMenuSplash(void) {
  CurrentMenu = MainMenu;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("______Main_Menu______");
  
  display.setCursor(5,Pos1);
  display.print("Throttle Sweep");
  
  display.setCursor(5,Pos2);
  display.print("Constant Throttle");
  
  display.setCursor(5,Pos3);
  display.print("Stress Test (HI-LO)");
  
  display.setCursor(5,Pos4);
  display.print("Sensor Output");
  
  display.setCursor(5,Pos5);
  display.print("Calibration");
  
  display.setCursor(5,Pos6);
  display.print("Settings");
  
  display.display();
}

void ThrottleSweepSplash(void) {
  CurrentMenu = ThrottleSweep;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Throttle_Sweep___");
  
  display.setCursor(5,Pos1);
  display.print("Start Throttle:");
  
  display.setCursor(5,Pos2);
  display.print("End Throttle:");
  
  display.setCursor(5,Pos3);
  display.print("Step Size:");
  
  display.setCursor(5,Pos4);
  display.print("Step Time:");
  
  display.setCursor(5,Pos5);
  display.print("START");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void ConstantThrottleSplash(void) {
  CurrentMenu = ConstantThrottle;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Throttle_Sweep___");
  
  display.setCursor(5,Pos1);
  display.print("Constant Throttle:");
  
  display.setCursor(5,Pos2);
  display.print("Test Time:");
  
  display.setCursor(5,Pos3);
  display.print(" ");
  
  display.setCursor(5,Pos4);
  display.print(" ");
  
  display.setCursor(5,Pos5);
  display.print("START");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void StressTestSplash(void) {
  CurrentMenu = StressTest;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Stress_Test____");
  
  display.setCursor(5,Pos1);
  display.print("High Throttle:");
  
  display.setCursor(5,Pos2);
  display.print("Low Throttle:");
  
  display.setCursor(5,Pos3);
  display.print("Switch Time:");
  
  display.setCursor(5,Pos4);
  display.print("Test Time:");
  
  display.setCursor(5,Pos5);
  display.print("START");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void SensorOutputSplash(void) {
  CurrentMenu = SensorOutput;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Sensor_Output____");
  
  display.setCursor(5,Pos1);
  display.print("Thrust:");
  
  display.setCursor(5,Pos2);
  display.print("Torque:");
  
  display.setCursor(5,Pos3);
  display.print("RPM:");
  
  display.setCursor(5,Pos4);
  display.print("Volt&Amps:");
  
  display.setCursor(5,Pos5);
  display.print("START");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void CalibrationSplash(void) {
  CurrentMenu = Calibration;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Calibration____");
  
  display.setCursor(5,Pos1);
  display.print("Thrust LC:");
  
  display.setCursor(5,Pos2);
  display.print("Torque LC:");
  
  display.setCursor(5,Pos3);
  display.print("ESC:");
  
  display.setCursor(5,Pos4);
  display.print("Voltage:");
  
  display.setCursor(5,Pos5);
  display.print("START");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void SettingsSplash(void) {
  CurrentMenu = Calibration;
  display.clearDisplay();
  
  display.setCursor(0,5);
  display.print("____Settings____");
  
  display.setCursor(5,Pos1);
  display.print("Warning V:");
  
  display.setCursor(5,Pos2);
  display.print("Min V:");
  
  display.setCursor(5,Pos3);
  display.print("Max Current:");
  
  display.setCursor(5,Pos4);
  display.print("Max Power:");
  
  display.setCursor(5,Pos5);
  display.print("Configuration:");
  
  display.setCursor(5,Pos6);
  display.print("Back");
  
  display.display();
}

void SplashUpdate(void) {
  display.clearDisplay();
  if(CurrentMenu == MainMenu){
    MainMenuSplash();
  }else if(CurrentMenu == ThrottleSweep){
    ThrottleSweepSplash();
  }else if(CurrentMenu == ConstantThrottle){
    ConstantThrottleSplash();
  }else if(CurrentMenu == StressTest){
    StressTestSplash();
  }else if(CurrentMenu == SensorOutput){
    SensorOutputSplash();
  }else if(CurrentMenu == Calibration){
    CalibrationSplash();
  }else if(CurrentMenu == Settings){
    SettingsSplash();
  }else{
  cursorPositionUpdate();
}
}

void cursorPositionUpdate(void) {
  display.setCursor(0,SelectionPos);
  display.print(">");
  display.display();
}

void cursorSelect(void){
  display.setCursor(0,SelectionPos);
  display.print("<");
  display.display();
  SelectionPos = Pos1;
  delay(50);
  if(CurrentMenu == MainMenu){
    if (SelectionPos == Pos1){
      CurrentMenu = ThrottleSweep; 
    }else if(SelectionPos == Pos2){
      CurrentMenu = ConstantThrottle; 
    }else if(SelectionPos == Pos3){
      CurrentMenu = StressTest; 
    }else if(SelectionPos == Pos4){
      CurrentMenu = SensorOutput; 
    }else if(SelectionPos == Pos5){
      CurrentMenu = Calibration; 
    }else if(SelectionPos == Pos6){
      CurrentMenu = Settings; 
    }
  }else if(CurrentMenu == ThrottleSweep){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else if(CurrentMenu == ConstantThrottle){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else if(CurrentMenu == StressTest){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else if(CurrentMenu == SensorOutput){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else if(CurrentMenu == Calibration){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else if(CurrentMenu == Settings){
    if (SelectionPos == Pos1){
       
    }else if(SelectionPos == Pos2){
      
    }else if(SelectionPos == Pos3){
      
    }else if(SelectionPos == Pos4){
       
    }else if(SelectionPos == Pos5){
       
    }else if(SelectionPos == Pos6){
      CurrentMenu = MainMenu; 
    }
  }else{
    CurrentMenu = MainMenu;
  }
  SplashUpdate();
}

void cursorDown(void) {
  if(SelectionPos == Pos1){
    SelectionPos = Pos2;
  }else if(SelectionPos == Pos2){
    SelectionPos = Pos3;
  }else if(SelectionPos == Pos3){
    SelectionPos = Pos4;
  }else if(SelectionPos == Pos4){
    SelectionPos = Pos5;
  }else if(SelectionPos == Pos5){
    SelectionPos = Pos6;
  }else if(SelectionPos == Pos6){
    SelectionPos = Pos1;
  }else{
    SelectionPos = Pos1;
  }
  
  display.clearDisplay();
  SplashUpdate();
  cursorPositionUpdate();
}

void cursorUp(void) {
  if(SelectionPos == Pos1){
    SelectionPos = Pos6;
  }else if(SelectionPos == Pos2){
    SelectionPos = Pos1;
  }else if(SelectionPos == Pos3){
    SelectionPos = Pos2;
  }else if(SelectionPos == Pos4){
    SelectionPos = Pos3;
  }else if(SelectionPos == Pos5){
    SelectionPos = Pos4;
  }else if(SelectionPos == Pos6){
    SelectionPos = Pos5;
  }else{
    SelectionPos = Pos1;
  }
  
  display.clearDisplay();
  SplashUpdate();
}
